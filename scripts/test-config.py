#!/usr/bin/env python3
"""
Script de test pour v√©rifier la configuration YouTube API
"""

import os
import json
from pathlib import Path

def test_configuration():
    """Tester la configuration"""
    print("üîç Test de configuration YouTube API")
    print("=" * 40)
    
    # V√©rifier Python
    print("‚úÖ Python 3 d√©tect√©")
    
    # V√©rifier l'environnement virtuel
    if os.path.exists('venv'):
        print("‚úÖ Environnement virtuel trouv√©")
    else:
        print("‚ùå Environnement virtuel manquant")
        return False
    
    # V√©rifier les d√©pendances
    try:
        import google.auth
        import googleapiclient
        print("‚úÖ D√©pendances Python install√©es")
    except ImportError as e:
        print(f"‚ùå D√©pendances manquantes: {e}")
        return False
    
    # V√©rifier client_secrets.json
    if os.path.exists('client_secrets.json'):
        try:
            with open('client_secrets.json', 'r') as f:
                config = json.load(f)
            
            if 'installed' in config:
                client_id = config['installed'].get('client_id', '')
                if client_id and 'googleusercontent.com' in client_id:
                    print("‚úÖ client_secrets.json valide")
                else:
                    print("‚ùå client_secrets.json invalide - client_id incorrect")
                    return False
            else:
                print("‚ùå client_secrets.json invalide - format incorrect")
                return False
        except json.JSONDecodeError:
            print("‚ùå client_secrets.json invalide - JSON malform√©")
            return False
    else:
        print("‚ùå client_secrets.json manquant")
        print("üìù T√©l√©chargez-le depuis: https://console.cloud.google.com/apis/credentials")
        return False
    
    # V√©rifier les vid√©os
    videos_dir = Path("../assets/images")
    if videos_dir.exists():
        video_files = list(videos_dir.glob("*.MP4"))
        if video_files:
            print(f"‚úÖ {len(video_files)} vid√©os trouv√©es")
            for video in video_files:
                print(f"   ‚Ä¢ {video.name}")
        else:
            print("‚ùå Aucune vid√©o MP4 trouv√©e")
            return False
    else:
        print("‚ùå Dossier assets/images introuvable")
        return False
    
    print("\nüéØ Configuration pr√™te pour l'upload!")
    return True

def test_authentication():
    """Tester l'authentification"""
    print("\nüîê Test d'authentification...")
    
    try:
        from google_auth_oauthlib.flow import InstalledAppFlow
        from google.auth.transport.requests import Request
        from googleapiclient.discovery import build
        
        SCOPES = ['https://www.googleapis.com/auth/youtube.upload']
        CLIENT_SECRETS_FILE = 'client_secrets.json'
        
        credentials = None
        if os.path.exists('token.json'):
            credentials = json.load(open('token.json'))
        
        if not credentials or not credentials.valid:
            if credentials and credentials.expired and credentials.refresh_token:
                credentials.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, SCOPES)
                credentials = flow.run_local_server(port=0)
            
            with open('token.json', 'w') as token:
                token.write(credentials.to_json())
        
        youtube = build('youtube', 'v3', credentials=credentials)
        
        # Test simple - r√©cup√©rer les informations du compte
        channels_response = youtube.channels().list(
            part='snippet',
            mine=True
        ).execute()
        
        if channels_response['items']:
            channel = channels_response['items'][0]
            print(f"‚úÖ Authentification r√©ussie!")
            print(f"   üì∫ Cha√Æne: {channel['snippet']['title']}")
            return True
        else:
            print("‚ùå Aucune cha√Æne trouv√©e")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur d'authentification: {e}")
        return False

if __name__ == '__main__':
    if test_configuration():
        test_authentication()
    else:
        print("\n‚ùå Configuration incompl√®te. Veuillez corriger les erreurs ci-dessus.") 